/*
 * generated by Xtext
 */
package org.softlang.megal.language.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.softlang.megal.MegalAnnotation;
import org.softlang.megal.MegalEntity;
import org.softlang.megal.MegalEntityType;
import org.softlang.megal.MegalFile;
import org.softlang.megal.MegalLink;
import org.softlang.megal.MegalPackage;
import org.softlang.megal.MegalPair;
import org.softlang.megal.MegalRelationship;
import org.softlang.megal.MegalRelationshipType;
import org.softlang.megal.language.services.MegalGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractMegalSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MegalGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MegalPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MegalPackage.MEGAL_ANNOTATION:
				sequence_MegalAnnotation(context, (MegalAnnotation) semanticObject); 
				return; 
			case MegalPackage.MEGAL_ENTITY:
				sequence_MegalEntity(context, (MegalEntity) semanticObject); 
				return; 
			case MegalPackage.MEGAL_ENTITY_TYPE:
				sequence_MegalEntityType(context, (MegalEntityType) semanticObject); 
				return; 
			case MegalPackage.MEGAL_FILE:
				sequence_MegalFile(context, (MegalFile) semanticObject); 
				return; 
			case MegalPackage.MEGAL_LINK:
				sequence_MegalLink(context, (MegalLink) semanticObject); 
				return; 
			case MegalPackage.MEGAL_PAIR:
				sequence_MegalPair(context, (MegalPair) semanticObject); 
				return; 
			case MegalPackage.MEGAL_RELATIONSHIP:
				sequence_MegalRelationship(context, (MegalRelationship) semanticObject); 
				return; 
			case MegalPackage.MEGAL_RELATIONSHIP_TYPE:
				sequence_MegalRelationshipType(context, (MegalRelationshipType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (key=ID value=STRING?)
	 */
	protected void sequence_MegalAnnotation(EObject context, MegalAnnotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=MegalAnnotation* name=ID supertype=[MegalEntityType|ID]?)
	 */
	protected void sequence_MegalEntityType(EObject context, MegalEntityType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=MegalAnnotation* name=ID type=[MegalEntityType|ID] (params+=[MegalEntity|ID] params+=[MegalEntity|ID]*)? many?='+'?)
	 */
	protected void sequence_MegalEntity(EObject context, MegalEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         annotations+=MegalAnnotation* 
	 *         name=ID 
	 *         (
	 *             imports+=[MegalFile|ID] | 
	 *             declarations+=MegalEntityType | 
	 *             declarations+=MegalRelationshipType | 
	 *             declarations+=MegalEntity | 
	 *             declarations+=MegalRelationship | 
	 *             declarations+=MegalPair | 
	 *             bindings+=MegalLink
	 *         )*
	 *     )
	 */
	protected void sequence_MegalFile(EObject context, MegalFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=MegalAnnotation* link=[MegalEntity|ID] (first=[MegalEntity|ID] second=[MegalEntity|ID])? to=STRING)
	 */
	protected void sequence_MegalLink(EObject context, MegalLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=MegalAnnotation* set=[MegalEntity|ID] first=[MegalEntity|ID] second=[MegalEntity|ID])
	 */
	protected void sequence_MegalPair(EObject context, MegalPair semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         annotations+=MegalAnnotation* 
	 *         name=ID 
	 *         left=[MegalEntityType|ID] 
	 *         (leftParams+=[MegalEntity|ID] leftParams+=[MegalEntity|ID]*)? 
	 *         (leftBoth?='(+)' | leftMany?='+')? 
	 *         right=[MegalEntityType|ID] 
	 *         (rightParams+=[MegalEntity|ID] rightParams+=[MegalEntity|ID]*)? 
	 *         (rightBoth?='(+)' | rightMany?='+')?
	 *     )
	 */
	protected void sequence_MegalRelationshipType(EObject context, MegalRelationshipType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=MegalAnnotation* left=[MegalEntity|ID] type=[MegalRelationshipType|ID] right=[MegalEntity|ID])
	 */
	protected void sequence_MegalRelationship(EObject context, MegalRelationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
